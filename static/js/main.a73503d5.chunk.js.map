{"version":3,"sources":["components/RoomList.js","components/Message.js","components/MessageList.js","components/NewRoomForm.js","components/SendMessage.js","App.js","config.js","serviceWorker.js","index.js"],"names":["RoomList","_this","this","react_default","a","createElement","className","props","rooms","map","room","index","key","onClick","switchRoom","id","selectedRoom","name","deleteRoom","Component","Message","message","MessageList","messages","components_Message","NewRoomForm","onChange","updateRoomVal","value","roomVal","placeholder","makeRoom","SendMessage","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","textVal","onKeyPress","submit","handleChange","App","roomId","joinableRooms","joinedRooms","allRooms","updateTextVal","bind","assertThisInitialized","getRooms","_this2","Chatkit","ChatManager","instanceLocator","userId","tokenProvider","TokenProvider","url","connect","then","currentUser","console","log","messageList","subscribeToRoomMultipart","hooks","onMessage","push","senderId","parts","payload","content","setState","catch","error","newRoomId","_this3","subscribeToRoom","text","err","_this4","concat","filter","_this5","roomName","length","createRoom","alert","_this6","getJoinableRooms","e","which","keyCode","input","target","trim","messageCopy","slice","sendMessage","components_RoomList","components_MessageList","components_NewRoomForm","components_SendMessage","React","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a73503d5.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass RoomList extends Component {\n  render() {\n    return (\n      <div className=\"room-list\">\n        <div>\n          <h3 className=\"your-rooms\">Your rooms:</h3>\n          <div className=\"all-rooms\">\n            {this.props.rooms.map((room, index) => {\n              return (\n                <div key={index}>\n                  <p onClick={() => this.props.switchRoom(room.id)} className={\"room-name roomLine\" + (this.props.selectedRoom === room.id ? \" active\" : \"\")}>&nbsp;&nbsp;&nbsp;#{room.name}</p>\n                  <i onClick={() => this.props.deleteRoom(room.id)} className=\"fas fa-trash fa-sm roomLine\"></i>\n                </div>\n              )\n            })}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default RoomList;\n","import React, { Component } from 'react';\n\nclass Message extends Component {\n  render() {\n    return (\n      <div>\n        <p className=\"sender\">{this.props.name}</p>\n        <p className=\"message\">{this.props.message}</p>\n      </div>\n    );\n  }\n}\n\nexport default Message;\n","import React, { Component } from 'react';\nimport Message from './Message.js';\n\nclass MessageList extends Component {\n  render() {\n    return (\n      <div id=\"message-panel\" className=\"message-panel\">\n        {this.props.messages.map((message, index) => {\n          return (\n            <Message key={index} name={message.name} message={message.message}/>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default MessageList;\n","import React, { Component } from 'react';\n\nclass NewRoomForm extends Component {\n  render() {\n    return (\n      <div className=\"form\">\n        <input onChange={this.props.updateRoomVal} value={this.props.roomVal} placeholder=\"Create a room\" className=\"create-a-room\"></input>\n        <i className=\"fas fa-plus\" onClick={this.props.makeRoom}></i>\n      </div>\n    );\n  }\n}\n\nexport default NewRoomForm;\n","import React, { Component } from 'react';\n\nclass SendMessage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      textVal: '',\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"send\">\n        <textarea\n        id=\"text-area\"\n        onKeyPress={this.props.submit}\n        placeholder=\"Type message & hit enter\"\n        value={this.props.textVal}\n        onChange={this.props.handleChange}\n        ></textarea>\n      </div>\n    );\n  }\n}\n\nexport default SendMessage;\n","import React from 'react';\nimport './App.css';\nimport RoomList from './components/RoomList.js';\nimport MessageList from './components/MessageList.js';\nimport NewRoomForm from './components/NewRoomForm.js';\nimport SendMessage from './components/SendMessage.js';\nimport Chatkit from '@pusher/chatkit-client';\nimport { tokenUrl, instanceLocator } from './config'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = ({\n      roomId: '',\n      textVal: '',\n      messages: [],\n      roomVal: '',\n      joinableRooms: [],\n      joinedRooms: [],\n      allRooms: []\n    });\n\n    this.updateTextVal = this.updateTextVal.bind(this);\n    this.submit = this.submit.bind(this);\n    this.makeRoom = this.makeRoom.bind(this);\n    this.updateRoomVal = this.updateRoomVal.bind(this);\n    this.getRooms = this.getRooms.bind(this);\n    this.deleteRoom = this.deleteRoom.bind(this);\n    this.switchRoom = this.switchRoom.bind(this);\n  }\n\n  componentDidMount() {\n    const chatManager = new Chatkit.ChatManager({\n        instanceLocator,\n        userId: 'amy wang',\n        tokenProvider: new Chatkit.TokenProvider({\n        url: tokenUrl,\n    })\n  });\n\n  chatManager\n  .connect()\n  .then(currentUser => {\n    this.currentUser = currentUser;\n    this.getRooms();\n    console.log(\"Connected as user \", currentUser);\n    let messageList = [];\n    currentUser.subscribeToRoomMultipart({\n      roomId: currentUser.rooms[0].id,\n      hooks: {\n        onMessage: message => {\n          // alert(message.parts[0].payload.content);\n          messageList.push({\n            'name': message.senderId,\n            'message': message.parts[0].payload.content\n          });\n          this.setState({\n            messages: messageList,\n            roomId: currentUser.rooms[0].id\n          })\n        }\n      }\n    });\n  })\n  .catch(error => {\n      console.error(\"error:\", error);\n    });\n  }\n\n  switchRoom(newRoomId) {\n    console.log('SWITCH ROOM to ' + newRoomId);\n    this.setState({\n      messages: []\n    });\n    let messageList = [];\n    this.currentUser.subscribeToRoom({\n        roomId: newRoomId,\n        hooks: {\n            onMessage: message => {\n                //alert('MESSAGE: ' + JSON.stringify(message));\n                messageList.push({\n                  'name': message.senderId,\n                  'message': message.text\n                });\n                this.setState({\n                    roomId: newRoomId,\n                    messages: messageList\n                })\n            }\n        }\n    })\n    .then(room => {\n        this.setState({\n            roomId: room.id\n        })\n        this.getRooms()\n    })\n    .catch(err => console.log('error on subscribing to room: ', err))\n  }\n\n  deleteRoom(roomId) {\n    this.currentUser.deleteRoom({\n      roomId: roomId\n    })\n    .then(() => {\n      console.log(`deleted room with ID: ${roomId}`)\n      console.log(this.state.allRooms);\n      this.setState({\n        joinableRooms: this.state.joinableRooms.filter((room) => room.id !== roomId),\n        joinedRooms: this.state.joinedRooms.filter((room) => room.id !== roomId),\n        allRooms: this.state.allRooms.filter((room) => room.id !== roomId)\n      });\n    })\n    .catch(err => {\n      console.log(`error deleted room ${roomId}: ${err}`)\n    })\n  }\n\n  makeRoom() {\n    //let roomsCopy = this.state.rooms.slice();\n    console.log('making room called ' + this.state.roomVal);\n    // roomsCopy.push('Bob');\n    // this.setState({\n    //   rooms: roomsCopy\n    // });\n    let roomName = this.state.roomVal;\n    if (roomName.length === 0) {\n      alert('Room name is empty');\n      return;\n    }\n\n    this.currentUser.createRoom({\n      name: roomName,\n    })\n    .then(room => {\n      this.setState({\n        roomVal: '',\n        joinedRooms: this.state.joinedRooms.concat(room),\n        allRooms: this.state.allRooms.concat(room),\n      });\n    })\n    .catch(err => console.log('error with createRoom: ', err))\n  }\n\n  getRooms() {\n      this.currentUser.getJoinableRooms()\n      .then(joinableRooms => {\n          console.log(this.currentUser.rooms);\n          this.setState({\n              joinableRooms,\n              joinedRooms: this.currentUser.rooms,\n              allRooms: joinableRooms.concat(this.currentUser.rooms)\n          });\n      })\n      .catch(err => console.log('error on joinableRooms: ', err))\n  }\n\n  submit(e) {\n    if (e.which === 13 || e.keyCode === 13) {\n        //code to execute here\n        let input = e.target.value.trim();\n        if (input.length === 0) {\n          alert('Message box is empty');\n          return;\n        }\n        let messageCopy = this.state.messages.slice();\n        messageCopy.push({\n          'name': 'anonymous',\n          'message': input\n        });\n        this.setState({\n          textVal: '',\n          messages: messageCopy\n        });\n        this.currentUser.sendMessage({\n            text: input,\n            roomId: this.state.roomId,\n        })\n    }\n  }\n\n  updateTextVal(e) {\n    this.setState({\n      textVal: e.target.value,\n    });\n  }\n\n  updateRoomVal(e) {\n    this.setState({\n      roomVal: e.target.value,\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"row\">\n          <RoomList\n            className=\"RoomList\"\n            rooms={this.state.allRooms}\n            deleteRoom={this.deleteRoom}\n            switchRoom={this.switchRoom}\n            selectedRoom={this.state.roomId}/>\n          <MessageList\n            className=\"MessageList\"\n            messages={this.state.messages}/>\n        </div>\n        <div className=\"row\">\n          <NewRoomForm\n            className=\"NewRoomForm\"\n            makeRoom={this.makeRoom}\n            roomVal={this.state.roomVal}\n            updateRoomVal={this.updateRoomVal}\n            />\n          <SendMessage\n            className=\"SendMessage\"\n            handleChange={this.updateTextVal}\n            textVal={this.state.textVal}\n            submit={this.submit}\n            />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const tokenUrl = 'https://us1.pusherplatform.io/services/chatkit_token_provider/v1/0e96fcde-6705-4b06-8703-1fb324bca30a/token';\nconst instanceLocator = 'v1:us1:0e96fcde-6705-4b06-8703-1fb324bca30a';\n\nexport { tokenUrl, instanceLocator }\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}